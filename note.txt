
template <typename T>
void	printVector(LIBRARY::vector< T > const &vct, std::string str) {

	p1 str << "\n";
	for (size_t i = 0 ; i < vct.size() ; i++)
		p1 "\t-> " << vct[i] p2
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// 
	
		// LIBRARY::vector< std::string >	test;
		// test.push_back("Salut, "); // first time : this->size() + 1 = 0 et this->capacity() = 0
		// test.push_back("c'est "); // this->size() + 1 = 1 et this->capacity() = 1
		// test.push_back("un container "); // this->size() + 1 = 2 et this->capacity() = 2
		// test.push_back("rempli de "); // this->size() + 1 = 4 et this->capacity() = 4
		// test.push_back("std::string !");
		// LIBRARY::vector< std::string >::iterator		it = test.begin();
		// // LIBRARY::vector< std::string >::const_iterator	itcbegin = test.cbegin();

		// for (size_t i = 0 ; i < test.size() ; i++)
		// 	p1 BLUE << "[" << it[i] << "]" << RESET;
		// p3 p3
		
		LIBRARY::vector< int > vct(5);
		LIBRARY::vector< int >::iterator it = vct.begin(), ite = vct.end();

		p1 "len: " << (ite - it) p2
		for (; it != ite; ++it)
			*it = (ite - it);
		p1 "vct = ";
		for (size_t i = 0 ; i < vct.size() ; i++)
			p1 vct[i] << " ";
		p3

		it = vct.begin();
		LIBRARY::vector< int > vct_range(it, --(--ite));
		for (int i = 0; it != ite; ++it)
			*it = ++i * 5;
		p1 "vct_range = ";
		for (size_t i = 0 ; i < vct_range.size() ; i++)
			p1 vct_range[i] << " ";
		p3

		it = vct.begin();
		LIBRARY::vector< int > vct_copy(vct);
		for (int i = 0; it != ite; ++it)
			*it = ++i * 7;
		vct_copy.push_back(42);
		vct_copy.push_back(21);
		p1 "vct_copy = ";
		for (size_t i = 0 ; i < vct_copy.size() ; i++)
			p1 vct_copy[i] << " ";
		p3 p3

		p1 "\t-- PART ONE --" p2
		p1 "1 SIZE vct = " << vct.size() p2
		p1 "1 SIZE vct_range = " << vct_range.size() p2 // normalement 3 -> , ici 0
		p1 "1 SIZE vct_copy = " << vct_copy.size() p2

		// p1 "vct = vct_copy ->" p2
		vct = vct_copy;
		// p1 "vct_copy = vct_range ->" p2
		vct_copy = vct_range;
		vct_range.clear();

		p3
		p1 "\t-- PART TWO --" p2

		p1 "2 SIZE vct = " << vct.size() p2 // normalement 7, ici 0
		p1 "2 SIZE vct_range = " << vct_range.size() p2
		p1 "2 SIZE vct_copy = " << vct_copy.size() p2 // normalement 3, ici 7

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////// CHECK ERASE //////////////////////////////////////////////////



void	checkErase(LIBRARY::vector< std::string > const &vct,
					LIBRARY::vector< std::string >::const_iterator const &it)
{

	// p1 "avant" p2
	
	static int	i = 0;
	std::cout << "[" << i++ << "] " << "erase: " << it - vct.begin() << std::endl;
	p1 "2 SIZE vct = " << vct.size() p2
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////

	LIBRARY::vector< std::string > vct(10);

	for (unsigned long int i = 0; i < vct.size(); ++i)
		vct[i] = std::string((vct.size() - i), i + 65);
	p1 "1 SIZE vct = " << vct.size() p2

	// p1 "not ok for now" p2

	// p1 "before = ";
	// for (size_t i = 0 ; i < vct.size() ; i++)
	// 	p1 vct[i] << " " p2

	checkErase(vct, vct.erase(vct.begin() + 2));

	// p1 "after = ";
	// for (size_t i = 0 ; i < vct.size() ; i++)
	// 	p1 vct[i] << " " p2

	// p1 "first erase is ok" p2
	vct.push_back("Hello xaxa");
	vct.push_back("Hi there xaxa");
	checkErase(vct, vct.erase(vct.begin()));
	checkErase(vct, vct.erase(vct.end() - 1));

	// p1 "after = ";
	// for (size_t i = 0 ; i < vct.size() ; i++)
	// 	p1 vct[i] << " " p2

	// p1 "before = \n";
	// for (size_t i = 0 ; i < vct.size() ; i++)
	// 	p1 "\t-> " << vct[i] p2
	checkErase(vct, vct.erase(vct.begin(), vct.begin() + 3));
	// p1 "after = \n";
	// for (size_t i = 0 ; i < vct.size() ; i++)
	// 	p1 "\t-> " << vct[i] p2

	p1 "before = \n";
	for (size_t i = 0 ; i < vct.size() ; i++)
		p1 "\t-> " << vct[i] p2
	
	checkErase(vct, vct.erase(vct.end() - 3, vct.end() - 1));

	vct.push_back("Hello");
	vct.push_back("Hi there");
	p1 "3 SIZE vct = " << vct.size() p2
	
	p1 "before = \n";
	for (size_t i = 0 ; i < vct.size() ; i++)
		p1 "\t-> " << vct[i] p2
	checkErase(vct, vct.erase(vct.end() - 3, vct.end()));
	p1 "after = \n";
	for (size_t i = 0 ; i < vct.size() ; i++)
		p1 "\t-> " << vct[i] p2

	vct.push_back("ONE");
	vct.push_back("TWO");
	vct.push_back("THREE");
	vct.push_back("FOUR");
	p1 "4 SIZE vct = " << vct.size() p2
	checkErase(vct, vct.erase(vct.begin(), vct.end()));

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////// CHECK CONSTRUCTOR COPY ////////////////

	LIBRARY::vector< int > vct(5);
	LIBRARY::vector< int >::iterator it = vct.begin(), ite = vct.end();

	std::cout << "len: " << (ite - it) << std::endl;
	for (; it != ite; ++it)
		*it = (ite - it);

	it = vct.begin();
	LIBRARY::vector< int > vct_range(it, --(--ite));
	for (int i = 0; it != ite; ++it)
		*it = ++i * 5;

	it = vct.begin();
	LIBRARY::vector< int > vct_copy(vct);
	for (int i = 0; it != ite; ++it)
		*it = ++i * 7;
	vct_copy.push_back(42);
	vct_copy.push_back(21);

	std::cout << "\t-- PART ONE --" << std::endl;
	printSize(vct);
	printSize(vct_range);
	printSize(vct_copy);

	vct = vct_copy;
	vct_copy = vct_range;
	vct_range.clear();

	std::cout << "\t-- PART TWO --" << std::endl;
	printSize(vct);
	printSize(vct_range);
	printSize(vct_copy);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// CHECK INSERT2 ///////////////////////

	LIBRARY::vector< int > vct(5);
	LIBRARY::vector< int > vct2;
	const int cut = 3;

	for (unsigned long int i = 0; i < vct.size(); ++i)
		vct[i] = (vct.size() - i) * 7;
	printSize(vct);

	vct2.insert(vct2.begin(), vct.begin(), vct.begin() + cut);
	printSize(vct2);
	vct2.insert(vct2.begin(), vct.begin() + cut, vct.end());
	printSize(vct2);
	vct2.insert(vct2.end(), vct.begin(), vct.begin() + cut);
	printSize(vct2);

	std::cout << "insert return:" << std::endl;

	std::cout << *vct2.insert(vct2.end(), 42) << std::endl;
	std::cout << *vct2.insert(vct2.begin() + 5, 84) << std::endl;
	std::cout << "----------------------------------------" << std::endl;

	printSize(vct2);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////// ENCORE INSERT ////////////////

	LIBRARY::vector< int > vct(5);
	LIBRARY::vector< int > vct2;
	const int cut = 3;

	for (unsigned long int i = 0; i < vct.size(); ++i)
		vct[i] = (vct.size() - i) * 7;
	printSize(vct);

	printVector(vct2, "first one =");
	vct2.insert(vct2.begin(), vct.begin(), vct.begin() + cut);
	printSize(vct2);
	printVector(vct2, "before =");
	vct2.insert(vct2.begin(), vct.begin() + cut, vct.end());
	printVector(vct2, "after =");
	printVector(vct2, "before =");
	printSize(vct2);
	printVector(vct2, "after =");
	vct2.insert(vct2.end(), vct.begin(), vct.begin() + cut);
	printSize(vct2);

	std::cout << "insert return:" << std::endl;

	std::cout << *vct2.insert(vct2.end(), 42) << std::endl;
	printSize(vct2);
	std::cout << *vct2.insert(vct2.begin() + 5, 84) << std::endl;
	printSize(vct2);
	std::cout << "----------------------------------------" << std::endl;

	printSize(vct2);



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////MAP/////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	test rbt constructors + clear + EEEEELLLLLIIIIIIIIIISSSSSAAAAA
	////////


#define _pair LIBRARY::pair

template <typename T>
std::string	printPair(const T &iterator, bool nl = true, std::ostream &o = std::cout)
{
	o << "key: " << iterator->first << " | value: " << iterator->second;
	if (nl)
		o << std::endl;
	return ("");
}

template <typename T_MAP>
void	printSize(T_MAP const &mp, bool print_content = 1)
{
	std::cout << "size: " << mp.size() << std::endl;
	std::cout << "max_size: " << mp.max_size() << std::endl;
	if (print_content)
	{
		typename T_MAP::const_iterator it = mp.begin(), ite = mp.end();
		std::cout << std::endl << "Content is:" << std::endl;
		for (; it != ite; ++it)
			std::cout << "- " << printPair(it, false) << std::endl;
	}
	std::cout << "###############################################" << std::endl;
}

template <typename T1, typename T2>
void	printReverse(LIBRARY::map<T1, T2> &mp)
{
	typename LIBRARY::map<T1, T2>::iterator it = mp.end(), ite = mp.begin();

	std::cout << "printReverse:" << std::endl;
	while (it != ite) {
		it--;
		std::cout << "-> " << printPair(it, false) << std::endl;
	}
	std::cout << "_______________________________________________" << std::endl;
}


#define T1 char
#define T2 int
typedef _pair<const T1, T2> T3;

template <class T>
void	is_empty(T const &mp)
{
	std::cout << "is_empty: " << mp.empty() << std::endl;
}
{

		// ft::RedBlackTree< int, std::less< int > > elisa;
	// elisa.insert(42);
	// elisa.insert(1);
	// elisa.insert(-111);
	// elisa.insert(123);
	// elisa.insert(-2);

	// elisa.printTree();

	

	///////
	// ft::map< int, int > elisa2;
	// elisa2.insert(ft::pair< int, int >(42, 57));
	// elisa2.insert(ft::pair< int, int >(-123, 0));
	// elisa2.insert(ft::pair< int, int >(4, 9898));
	
	// elisa2.printTree();

	std::list<T3> lst;
	unsigned int lst_size = 7;
	for (unsigned int i = 0; i < lst_size; ++i)
		lst.push_back(T3(lst_size - i, i));

	LIBRARY::map<T1, T2> mp(lst.begin(), lst.end());
	LIBRARY::map<T1, T2>::iterator it = mp.begin(), ite = mp.end();
	LIBRARY::map<T1 , T2> mp_range(it, --(--ite));

	// for (; it != ite; it++) {
	// 	p1 it->first + 48 p2
	// }

	// p1 "oups" p2
	for (int i = 0; it != ite; ++it)
		it->second = ++i * 5;

	// p1 "avant = " p2
	for (size_t i = 0 ; i < mp.size() ; i++)
		p1 mp[i] << " ";
	p3

	

	it = mp.begin(); ite = --(--mp.end());
	// p1 "on utilise quel constructeur ????" p2
	LIBRARY::map<T1, T2> mp_copy(mp);
	// p1 "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" p2
	
	for (int i = 0; it != ite; ++it)
		it->second = ++i * 7;

	// p1 "apres = " p2
	for (size_t i = 0 ; i < mp.size() ; i++)
		p1 mp[i] << " ";
	p3

	std::cout << "\t-- PART ONE --" << std::endl;
	printSize(mp);
	printSize(mp_range);
	// mp.printTree(); 	);
	// p1 "ici" p2
	printSize(mp_copy);

	mp = mp_copy;
	mp_copy = mp_range;
	mp_range.clear();

	std::cout << "\t-- PART TWO --" << std::endl;
	printSize(mp);
	printSize(mp_range);
	printSize(mp_copy);

	}